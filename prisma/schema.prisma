generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id             String    @id @unique @default(uuid())
  email          String    @unique
  name           String
  password       String
  avatar         String?
  avatarBlurHash String?   @map("avatar_blur_hash")
  isSeller       Boolean   @map("is_seller")
  isAdmin        Boolean   @default(false) @map("is_admin")
  isActive       Boolean   @default(true) @map("is_active")
  token          String?
  expoPushToken  String?   @map("expo_push_token")
  admin          Admin?
  customer       Customer?
  seller         Seller?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
}

model Admin {
  accountId String   @id @unique @map("account_id")
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Customer {
  accountId    String       @id @unique @map("account_id")
  account      Account      @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  latitude     String?
  longitude    String?
  address      String?
  favorite     Favorite?
  subscription Subscribe?
  complaints   Complaints[]
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
}

model Seller {
  accountId  String       @id @unique @map("account_id")
  account    Account      @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  latitude   String?
  longitude  String?
  address    String?
  product    Product[]
  subscriber Subscribe[]
  complaints Complaints[]
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
}

model Subscribe {
  customerId   String   @id @unique @map("customer_id")
  customer     Customer @relation(fields: [customerId], references: [accountId], onDelete: Cascade, onUpdate: Cascade)
  subscription Seller[]
}

model Category {
  name      String    @id @unique
  product   Product[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
}

model Product {
  id            String     @id @unique @default(uuid())
  sellerId      String     @map("seller_id")
  seller        Seller     @relation(fields: [sellerId], references: [accountId], onDelete: Cascade, onUpdate: Cascade)
  categoryName  String     @map("category_name")
  category      Category   @relation(fields: [categoryName], references: [name])
  name          String
  description   String
  price         String
  images        String[]
  imageBlurHash String?    @map("image_blur_hash")
  startTime     DateTime   @map("start_time")
  endTime       DateTime   @map("end_time")
  isDaily       Boolean    @map("is_daily")
  isActive      Boolean    @default(true) @map("is_active")
  favorite      Favorite[]
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
}

model Favorite {
  id         String    @id @unique @default(uuid())
  customerId String    @unique @map("customer_id")
  customer   Customer  @relation(fields: [customerId], references: [accountId], onDelete: Cascade, onUpdate: Cascade)
  product    Product[]
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
}

model Complaints {
  id          String               @id @unique @default(uuid())
  customerId  String               @map("customer_id")
  sellerId    String               @map("seller_id")
  description String
  status      StatusComplaintsType @default(PENDING)
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  customer    Customer             @relation(fields: [customerId], references: [accountId], onDelete: Cascade, onUpdate: Cascade)
  seller      Seller               @relation(fields: [sellerId], references: [accountId], onDelete: Cascade, onUpdate: Cascade)
}

enum StatusComplaintsType {
  PENDING
  RESOLVED
}
